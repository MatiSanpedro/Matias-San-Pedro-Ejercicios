#metodos de insercion y listas 
import copy
'''
lista1 = ["gilada", "huevada","3","4"]
lista = []
otra_lista = ["cuerno","tomate"]
lista1.append(lista)# agrega un item al final de la lista
lista.insert(1,"tuvieja")  #agrega un item en la posicion especificada
lista.extend(otra_lista)  #añade una lista a la lista inicial 
lista1.remove("gilada") #remueve el primer item/ocurrencia de la lista
lista.pop(1) #elimina todo lo demas y devuelve el elemento de la posicion dada por () | pop debe usarse con una variable para guardarse, porque retorna cosas nuevas
#si no se especifica un indice, elimina todo y devuelve el ultimo item

lista1.clear #elimina todo lo que haya en una lista 
lista1.index("huevada") #elimina y devuelve el indice de la primera ocurrencia del elemento especificado (1)
#index tiene parametros opcionales para buscar el elemento indicado lista.index(gilada,2) esto empieza a buscar desde el 2 
# lista.index(elemento,inicio,fin)
# si no le pongo nada, busca hasta el primer elemento

#lista1.sort(lista)# ordena en orden ascendente
#lista1.reverse(lista)#invierte el orden de los elementos de la lista(ordena al reves )
#metodos de eliminacion:

#otra eliminacion llamada DEL
del lista[0]#me elimina el item de la posicion 0 

#slicing:
numeros = [0,1,2,3,4,5]
del numeros [1:4]
#me borra los numeros que seleccione

#superficial (ver coso)

#deep copy crea una lista nueva independiente
#duplicando todos los objetos
#requiere importar copy al principio

#funcion enumerate
#agrega un indice, contador a un objeto iterable
#como una lista

#for indice "lista, in enumerate ()
friends = ["rachel","ross","chandler","phoebe","joey","monica"]

friends.append("gunter")

#asi se copia una lista 
friends2 = copy.deepcopy(friends)
friends[0] = "paco"
print(friends)
print(friends2)


friends2.insert(1, "frasco") 
print(friends)
print(friends2)


friends2[2]  = "pepe"
print(friends)
print(friends2)

amigos = ["rachel","ross","chandler","ross","phoebe","joey","monica"]
edades = [25,50,17,42,65,30]

amigos.remove("ross")
print(amigos)

amigos = ["rachel","ross","chandler","ross","phoebe","joey","monica"]
edades = [25,50,17,42,65,30]
print(amigos)
amigos.pop()
print(amigos)

amigos = ["rachel","ross","chandler","ross","phoebe","joey","monica"]
edades = [25,50,17,42,65,30]
amigos.clear()
print(amigos)


amigos = ["rachel","ross","chandler","ross","phoebe","joey","monica"]
edades = [25,50,17,42,65,30]

del amigos[1:4]
print(amigos)



dias = [[10,20,30],[40,50,60],[70,80,90]]
meses = [[1,2,3], [4,5,6],[7,8,9]]

dias2= copy.copy(dias)
meses2 = copy.copy(meses)
print(dias2,meses2)

amigos = ["rachel","ross","chandler","ross","phoebe","joey","monica"]
edades = [25,50,17,42,65,30]
for indice, amigo in enumerate(amigos):
    print(f"{indice} -- {amigo}")

    

amigos = ["rachel","ross","chandler","ross","phoebe","joey","monica"]
edades = [25,50,17,42,65,30]

for amigos, edades in zip(amigos, edades):
    print(f" {amigos} tiene {edades} años ")



#TUPLAS

mi_tupla = ("juan", "perez", 30)
nombre, apellido, edad = mi_tupla #las tuplas asignan hacia la derecha su variable, de esta manera
print(nombre) #00 juan
print(apellido) #01 perez
print(edad) #02 -30
#me imprime por orden lo que le asigné

#SET
set = {3,5,9,5,3,4,3}  #se utilizan dentro de llaves
print(type(set)) #elimina los elementos repetidos de una lista
print(set)
#esto se crea tambien usando la palambra reservada "set"

#tambien pueden unirse usando la funcion  .union entre dos sets, para que los muestre unidos, el segundo set va puesto entre parentesis   set_uno.union(set_dos)
set_uno ={1,2,3}
set_dos = {3,4,5}# los elementos repetidos van a desaparecer , en este caso el segundo 3 
union_set = set_uno.union(set_dos)
print(union_set) #salida: {1,2,3,4,5,6}


set_uno ={1,2,3}
set_dos = {3,4,5}

tupla = set_uno.update(set_dos)
print(tupla)

mirar como se comporta todo lo que hasta aca escribi

set = {3,2,1,4,5,6,1,4,6,10,11}
print(type(set))
print(set)

set2 = {10,12,11,15}

interseccion = set.intersection(set2)
print(interseccion)



mi_lista = [1,8,3,6,5]
print(mi_lista)
mi_lista[1] = 2
print(type(mi_lista))
print(mi_lista)

mi_tupla = tuple(mi_lista)
print(mi_tupla)
mi_tupla[1] = 8
#las tuplas son inmutables y no aceptan asignaciones



#DICCIONARIOS 
#este lo hice yo
notas_pepe = [7,8,3,7,5]
notas_laura= [6,10,7,9,1]

diccionario = ([
    ("Nombre:", "pepe"),
    ("Genero:", "M"),
    ("Legajo:", 34353),
    ("materia_1", 7),
    ("materia_2", 4)
    ("materia_3", 6)

    ("Nombre:","Laura"),
    
    ("Genero:", "F"),
    ("Legajo:","53535"),
    ("Notas:", notas_laura) ])
print(diccionario)

'''
#otra cosa 

# Hacer un diccionario que contenga las 5 materias, el nombre, el género y el legajo del estudiante.

datos_alumnos = [
    {
        'nombre': 'Kevin Geller',
        'genero': 'M',
        'legajo': 451098,
        'materia_1': 10,
        'materia_2': 5,
        'materia_3': 2,
        'materia_4': 7,
        'materia_5': 8,
        'promedio': 0
},
    {
        'nombre': 'Laura Fernández',
        'genero': 'F',
        'legajo': 369857,
        'materia_1': 8,
        'materia_2': 6,
        'materia_3': 10,
        'materia_4': 6,
        'materia_5': 4,
        'promedio': 0
},
{
        'nombre': 'Sofía Avalos',
        'genero': 'F',
        'legajo': 985741,
        'materia_1': 10,
        'materia_2': 8,
        'materia_3': 5,
        'materia_4': 10,
        'materia_5': 6,
        'promedio': 0
},
{
        'nombre': 'Miguel López',
        'genero': 'M',
        'legajo': 693214,
        'materia_1': 10,
        'materia_2': 5,
        'materia_3': 2,
        'materia_4': 7,
        'materia_5': 8,
        'promedio': 0
},
{
        'nombre': 'Nicolás Espinosa',
        'genero': 'M',
        'legajo': 985236,
        'materia_1': 5,
        'materia_2': 2,
        'materia_3': 10,
        'materia_4': 5,
        'materia_5': 7,
        'promedio': 0
}
]

#for alumno in datos_alumnos:
#   print(alumno["nombre"], alumno["genero"], alumno["legajo"], alumno["materia_1"], alumno["materia_2"], alumno["materia_3"], alumno["materia_4"], alumno["materia_5"])


def imprimir_alumno(alumno: dict) -> None:
    if len(alumno['nombre']) < 16:
         print(f"{alumno['nombre']}\t\t{alumno['genero']}\t{alumno['legajo']}\t{alumno['materia_1']}\t{alumno['materia_2']}\t{alumno['materia_3']}\t{alumno['materia_4']}\t{alumno['materia_5']}\t{alumno['promedio']}")
    else:
        print(f"{alumno['nombre']}\t{alumno['genero']}\t{alumno['legajo']}\t{alumno['materia_1']}\t{alumno['materia_2']}\t{alumno['materia_3']}\t{alumno['materia_4']}\t{alumno['materia_5']}\t{alumno['promedio']}")


  
def recorrer_datos(datos_alumnos: list) -> None:
    for alumno in datos_alumnos:
        imprimir_alumno(alumno)

def set_promedio(datos_alumnos: list) -> None:
    for alumno in datos_alumnos:
        calcular_promedio(alumno)

# HACER UNA FUNCIÓN QUE CALCULE EL PROMEDIO DE CADA DICCIONARIO Y LO GUARDE REEMPLAZANDO EL CERO.

def calcular_promedio(diccionario: dict) -> None:
    diccionario["promedio"] = (diccionario['materia_1'] + diccionario['materia_2'] + diccionario['materia_3'] + diccionario['materia_4'] + diccionario['materia_5']) / 5


def buscar_alumno(datos_alumnos: list, legajo: int) -> dict:
    retorno = {
        'nombre': '',
        'genero': '',
        'legajo': 0,
        'materia_1': 0,
        'materia_2': 0,
        'materia_3': 0,
        'materia_4': 0,
        'materia_5': 0,
        'promedio': 0
}
    for alumno in datos_alumnos:
        if legajo == alumno["legajo"]: 
            retorno = alumno
            break
    return retorno
    

#recorrer_datos(datos_alumnos)

diccionario = buscar_alumno(datos_alumnos, 985236)
#print(diccionario)

#print('NOMBRE\t\t\tGÉNERO\tLEGAJO\tMAT_1\tMAT_2\tMAT_3\tMAT_4\tMAT_5')
#imprimir_alumno(diccionario)

set_promedio(datos_alumnos)

print('NOMBRE\t\t\tGÉNERO\tLEGAJO\tMAT_1\tMAT_2\tMAT_3\tMAT_4\tMAT_5\tPROMEDIO')
recorrer_datos(datos_alumnos)
