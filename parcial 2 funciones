#Funciones_del_juego
import pygame as pg
import time
import random

#matrices 

def matriz_de_10x10():
    matriz_final = []
    for i in range(10):
        fila = [0] *10
        matriz_final.append(fila)
    
    
        
        
    return matriz_final
    

def matriz_de_20x20():
    matriz_final = []
    for i in range(20):
        fila = [0] *20
        matriz_final.append(fila)
        
        
        
    return matriz_final



def matriz_de_40x40():
    matriz_final = []
    for i in range(40):
        fila = [0]  *40
        matriz_final.append(fila)
        
        
        
    return matriz_final

#Colocar naves en matriz al azar(requiere matriz):

def cero_uno_matriz_de_10(matriz):
    for i in range(20):
        fila = random.randint(0,9)
        columna = random.randint(0,9)

        largo = random.choice([1,2,3])
        
        if columna + largo <= 10: #no quiero que la matriz se agrande mas de 10
            for j in range(largo):
                matriz[fila][columna + j] = 1


    return matriz 




def colocar_barcos(matriz): #coloca conjuntos de 1 en la matriz 

    conjuntos = [
        (1, 4),  #1 grupo de largo 4 (acorazado)
        (2, 3),  #2 grupos de largo 3 (cruceros)
        (3, 2),  #3 grupos de largo 2 (destructores)
        (4, 1),  #4 grupos individuales (submarino)
    
    ]


    for cantidad, largo in conjuntos:
        for i in range(cantidad):
           # print(f"\nIntentando colocar el grupo {i+1} de largo {largo}")
            colocado = False
            intentos = 0

            while not colocado and intentos < 50:
                fila = random.randint(0, 9)
                columna = random.randint(0, 10 - largo)
 
                # Verificamos si hay espacio libre
                espacio_disponible = True
                for j in range(largo):
                    if matriz[fila][columna + j] != 0:
                       # print(f"Espacio ocupado en [{fila}][{columna + j}]")
                        espacio_disponible = False
                        break

                # Si hay espacio, colocamos los 1
                if espacio_disponible:
                    for j in range(largo):
                        matriz[fila][columna + j] = 1
                   # print(f" Grupo colocado en fila {fila}, columnas {columna} a {columna + largo - 1}")
                    colocado = True

                intentos += 1

            if not colocado:
                print(f"⚠️ No se pudo colocar el grupo de tamaño {largo} tras 100 intentos.")

    return matriz


matriz = matriz_de_10x10()
barquito = colocar_barcos(matriz)
print(barquito)



#escenario 

def dibujar_escenario(pantalla, tamaño:int,columna:int,fila:int):

    for filass in range(fila):
        for columnass in range(columna):
            rectangulo = pg.Rect(columnass * tamaño, filass * tamaño, tamaño, tamaño)
            pg.draw.rect(pantalla, (0,0,200), rectangulo)
            pg.draw.rect(pantalla, (0,0,0), rectangulo, 1)
            

#dibujar los barcos (requiere la matriz)

def dibujar_barcos(pantalla,matriz:list,tamaño):
    for filass in range(len(matriz)):
        for columnass in range(len(matriz[0])):
            
            if matriz[filass][columnass] == 1:
                rectangulo = pg.Rect(columnass * tamaño, filass * tamaño, tamaño, tamaño)
                pg.draw.rect(pantalla,(60,0,0),rectangulo)
                




'''
matriz_creada = matriz_de_10x10()
efe = cero_uno(matriz_creada)
print(efe)
'''


def mostrar_menu(pantalla):
    pantalla.fill((50,50,50))
    fuente = pg.font.SysFont("Arial",50)
    texto = fuente.render("HACE CLICK PARA JUGAR",True, (255,255,255))
    pantalla.blit(texto, (100,200))

    for evento in pg.event.get():
        if evento.type ==pg.QUIT:
            return "salir"
        #if evento.type == pg.MOUSEBUTTONDOWN:
         #   return "juego"
    
    return "menu"


def mostrar_juego(pantalla):
    pantalla.fill((0,100,200))
    

    for evento in pg.event.get():
        if evento.type == pg.QUIT:
            return "salir"
        
    return "juego"


def funcion_teclado(evento):
        if evento.type == pg.KEYDOWN:
            if evento.key == pg.K_ESCAPE:
                print("se apretó esc")
            elif evento.key == pg.K_p:
                pg.mixer.music.pause()
            elif evento.key == pg.K_m:
                pg.mixer.music.stop()
        if evento.type == pg.KEYUP:
            print("se ha levantao la tecla")
        


def funcion_mouse(evento,boton1,boton2,boton3,boton4):
        
        if evento.type == pg.MOUSEBUTTONDOWN: 
            posicion = (evento.pos)
            print(f"{posicion}")

        
            if evento.button ==1:
                print("click izquierdo funciona")

            if boton1.collidepoint(posicion):
                print("EL BOTON 1 FUNCIONA")


            elif boton2.collidepoint(posicion):
                print("click en RECTANGULO2 correcto")
                
            elif boton3.collidepoint(posicion):
                print("click en RECTAngulo 3 CORRECTO")

            elif boton4.collidepoint(posicion):
                pg.quit()
                quit()
                

            elif evento.button ==3:
                    print("click derecho funciona")

        if evento.type == pg.MOUSEBUTTONUP:
            print("se solto el click")


def pausar_despausar(evento):
    if evento.type == pg.KEYDOWN:
        if evento.key == pg.K_p: # P = pausa 
            pg.mixer.music.pause()
            print("sonido pausado")
        if evento.key == pg.K_o: #O = despausa
            pg.mixer.music.unpause()
            print("Sonido reanudado")

        
        

